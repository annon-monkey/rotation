<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="Rotation.Forms.EditPage"
             xmlns:cv="clr-namespace:Rotation.Forms.Converters"
             xmlns:b="clr-namespace:Rotation.Forms.Behaviors"
             xmlns:local="clr-namespace:Rotation.Forms"
             Title="{Binding Elements.CollectionData.Name}" x:Name="EditPageSelf">
    <ContentPage.Resources>
        <ResourceDictionary>
            <cv:ElementType2BooleanConverter x:Key="ElementType2BooleanConv"/>
            <cv:NegativeConverter x:Key="NegativeConv"/>
            <cv:Boolean2ErrorTextColorConverter x:Key="Boolean2ErrorTextColorConv"/>
            <cv:GenerationLevel2ColorConverter x:Key="GenerationLevel2ColorConv"/>
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.Content>
        <Grid>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Button Text="全体設定を編集" Command="{Binding EditCollectionCommand}"/>
                <ListView Grid.Row="1" ItemsSource="{Binding Elements}" SelectedItem="{Binding SelectedElement,Mode=TwoWay}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <ViewCell>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="8"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <BoxView Color="{Binding GenerationLevel,Converter={StaticResource GenerationLevel2ColorConv}}"/>
                                    <Label Grid.Column="1" Text="{Binding Description}" VerticalOptions="Center" HorizontalOptions="Start"
                                           Margin="14,0,0,0" TextColor="{Binding IsError,Converter={StaticResource Boolean2ErrorTextColorConv}}"/>
                                </Grid>
                            </ViewCell>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <Picker ItemsSource="{Binding AddItems}" SelectedItem="{Binding SelectedAddItem,Mode=TwoWay}"/>
                    <Button Grid.Column="1" Text="追加" Command="{Binding AddCommand}"/>
                </Grid>
                <StackLayout Orientation="Horizontal" Grid.Row="3">
                    <Button Text="編集" Command="{Binding EditCommand}"/>
                    <Button Text="削除">
                        <Button.Behaviors>
                            <b:ConfirmButtonBehavior Command="{Binding BindingContext.DeleteCommand,Source={x:Reference EditPageSelf}}" Message="本当に削除しますか？"/>
                        </Button.Behaviors>
                    </Button>
                </StackLayout>
                <Grid Grid.Row="4">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Button Grid.Column="0" Text="←" Command="{Binding LeftCommand}"/>
                    <Button Grid.Column="1" Text="↑" Command="{Binding UpCommand}"/>
                    <Button Grid.Column="2" Text="↓" Command="{Binding DownCommand}"/>
                    <Button Grid.Column="3" Text="→" Command="{Binding RightCommand}"/>
                </Grid>
            </Grid>

            <Grid IsVisible="{Binding IsEditCollectionMode}" BackgroundColor="White">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <ContentView>
                    <StackLayout>
                        <Label Text="設定" Style="{StaticResource TitleLabelStyle}"/>
                        <Label Text="このデータ全体の設定をします" Style="{StaticResource DescriptionLabelStyle}"/>
                        <Label Text="名前" Style="{StaticResource HeaderLabelStyle}"/>
                        <Entry Text="{Binding Elements.CollectionData.Name,Mode=TwoWay}"/>
                        <Label Text="オプション" Style="{StaticResource HeaderLabelStyle}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Row="0" Text="無限に繰り返す"/>
                            <Switch Grid.Row="0" Grid.Column="1" IsToggled="{Binding Elements.CollectionData.IsRepeat,Mode=TwoWay}"/>
                        </Grid>
                    </StackLayout>
                </ContentView>
                <Button Grid.Row="1" Text="リストに戻る" Command="{Binding ApplyCommand}" Margin="0,16,0,12"/>
            </Grid>

            <Grid IsVisible="{Binding IsEditMode}" BackgroundColor="White">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <ScrollView>
                    <Grid>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=From}">
                            <StackLayout>
                                <Label Text="From" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="次の要素の「前項目の値を引き継ぐ」に影響します。この要素は単体では動作しません" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="速さ" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.Velocity,Mode=OneWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Stop}">
                            <StackLayout>
                                <Label Text="Stop" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="一定期間、動きを止めます" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.DuringTime,Mode=TwoWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Point}">
                            <StackLayout>
                                <Label Text="Point" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="指定した時間、一定の速さを維持します" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.DuringTime,Mode=TwoWay}"/>
                                <Label Text="速さ" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.Velocity,Mode=OneWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Line}">
                            <StackLayout>
                                <Label Text="Line" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="指定した時間の間、徐々に速さが一次関数的に変化します" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.DuringTime,Mode=TwoWay}"/>
                                <Label Text="初速" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.StartVelocity,Mode=OneWay}"/>
                                <Label Text="終速" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.EndVelocity,Mode=OneWay}" CanTakeOver="False"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Mutual}">
                            <StackLayout>
                                <Label Text="Mutual" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="この要素の子孫になった要素は、決まった間隔で右回転と左回転が入れ替わります" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="半回転の時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.HalfFrequencyTime,Mode=TwoWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=LinearMutual}">
                            <StackLayout>
                                <Label Text="Linear Mutual" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="この要素の子孫になった要素は、時間経過で右回転と左回転が入れ替わります。入れ替わるまでの時間が少しずつ変化します" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="最初に入れ替わるまでの時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.FirstTime,Mode=TwoWay}"/>
                                <Label Text="入れ替わる時間の最長または最短（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.MaxTime,Mode=TwoWay}"/>
                                <Label Text="入れ替わる時間の変化量（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.DeltaTime,Mode=TwoWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=RandomMutual}">
                            <StackLayout>
                                <Label Text="Random Mutual" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="この要素の子孫になった要素は、時間経過で右回転と左回転が入れ替わります。入れ替わるまでの時間がランダムに変化します" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="入れ替わる時間の最長（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.MaxTime,Mode=TwoWay}"/>
                                <Label Text="入れ替わる時間の最短（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.MinTime,Mode=TwoWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Loop}">
                            <StackLayout>
                                <Label Text="Loop" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="この要素の子孫になった要素は、決まった回数だけ繰り返し実行されます" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="繰り返し回数" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.LoopCount,Mode=TwoWay}"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Random}">
                            <StackLayout>
                                <Label Text="Random" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="速さが一定範囲内でランダムに変化します" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="速さが次に変わるまでの時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.SingleDuringTime,Mode=TwoWay}"/>
                                <Label Text="繰り返し回数" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.LoopCount,Mode=TwoWay}"/>
                                <Label Text="最小の速さ" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.MinVelocity,Mode=OneWay}"/>
                                <Label Text="最大の速さ" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.MaxVelocity,Mode=OneWay}" CanTakeOver="False"/>
                            </StackLayout>
                        </ContentView>
                        <ContentView IsVisible="{Binding SelectedElement.ElementType,Converter={StaticResource ElementType2BooleanConv},ConverterParameter=Trigonometric}">
                            <StackLayout>
                                <Label Text="Trigonometric" Style="{StaticResource TitleLabelStyle}"/>
                                <Label Text="速さが三角関数を利用したなめらかな加速・減速をともなった変化をします" Style="{StaticResource DescriptionLabelStyle}"/>
                                <Label Text="変化の種類" Style="{StaticResource HeaderLabelStyle}"/>
                                <Picker ItemsSource="{Binding SelectedElement.Functions,Mode=TwoWay}" SelectedItem="{Binding SelectedElement.Function,Mode=TwoWay}"/>
                                <Label Text="時間（0.1秒）" Style="{StaticResource HeaderLabelStyle}"/>
                                <Entry Keyboard="Numeric" Text="{Binding SelectedElement.DuringTime,Mode=TwoWay}"/>
                                <Label Text="初速" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.StartVelocity,Mode=OneWay}"/>
                                <Label Text="終速" Style="{StaticResource HeaderLabelStyle}"/>
                                <local:VelocityEditor Velocity="{Binding SelectedElement.EndVelocity,Mode=OneWay}" CanTakeOver="False"/>
                            </StackLayout>
                        </ContentView>
                    </Grid>
                </ScrollView>
                <Button Grid.Row="1" Text="リストに戻る" Command="{Binding ApplyCommand}" Margin="0,16,0,12"/>
            </Grid>
        </Grid>
    </ContentPage.Content>
</ContentPage>